import java.util.ArrayList;
import java.util.Iterator;

class LsodarOdeSolver {

    static {
        // Load the shared library liblsodarjni
        System.loadLibrary("lsodarjni");
    }

    private boolean initialized = false;
    private int jni_pointer;
    private LsodarOde ode;
    private LsodarObserver observer;

    public LsodarOdeSolver() {
    };

    private native int jni_initialize(LsodarOde ode);

    public void initialize(LsodarOde ode, LsodarObserver observer) {
    	if (initialized)
    		cleanup();
    	this.ode = ode;
    	this.observer = observer;
        jni_pointer = jni_initialize(ode);
        initialized = true;
    }

    private native void jni_cleanup(int jni_pointer);

    public void cleanup() {
    	if (initialized) {
    		jni_cleanup(jni_pointer);
    		initialized = false;
    	}
    }

    private native double jni_integrate(int jni_pointer, double t0, double[] x0, double t1);

    public double integrate(LsodarTimepointIterator timepointIterator, double[] x0) {
    	if (initialized) {
    		observer.initialize(timepointIterator.getCurrentTimepoint(), x0, timepointIterator.getLastTimepoint());
    		double[] x = x0;
    		double t = timepointIterator.getCurrentTimepoint();
    		while (timepointIterator.hasNextTimepoint()) {
        		double tNext = timepointIterator.getNextTimepoint();
        		t = jni_integrate(jni_pointer, t, x0, tNext);
        		if (t < tNext)
        			throw new RuntimeException("Integration of ODE failed");
        		observer.report(t, x);
    		}
    		return t;
    	} else
    		throw new IllegalStateException("Solver has not yet been initialized");
    }

    public void reportEvent(int eventIndex, double t, double[] x) {
        System.out.println("Event "+eventIndex+" occured at t="+t);
    }

    @Override
    protected void finalize() throws Throwable {
    	super.finalize();
    	cleanup();
    }

    //private static native Object callbackTest2(double arr[]);

    //private static native int callbackTest(double arr[]);

    //public static double callback(double v) {
    //    return v + 1;
    //}

    public static void main(String args[]) {
    	LsodarOdeSolver q = new LsodarOdeSolver();
    	Ode ode = new Ode();
    	Observer observer = new Observer();
    	double[] tSeries = { 0, 0.5, 1.0 };
    	Timepoints timepointIterator = new Timepoints(tSeries);
    	q.initialize(ode, observer);
    	double[] x0 = { 0 };
    	q.integrate(timepointIterator, x0);
    };

    public static class Ode implements LsodarOde {

		@Override
		public int getDimensionOfVectorField() {
			return 1;
		}

		@Override
		public int getNumberOfEventValues() {
			return 0;
		}

		@Override
		public void computeVectorField(double t, double[] x, double[] xDot) {
			xDot[0] = x[0];
		}

		@Override
		public void computeEventValues(double t, double[] x, double[] values) {
		}
    	
    }

    public static class Timepoints implements LsodarTimepointIterator {

    	private double[] tSeries;
    	private int index;

    	public Timepoints(double[] tSeries) {
    		this.tSeries = tSeries;
    		index = 0;
    	}

		@Override
		public double getInitialTimepoint() {
			return tSeries[0];
		}

		@Override
		public double getLastTimepoint() {
			return tSeries[tSeries.length - 1];
		}

		@Override
		public void reset() {
			index = 0;
		}

		@Override
		public double getCurrentTimepoint() {
			return tSeries[index];
		}

		@Override
		public boolean hasNextTimepoint() {
			return (index + 1) < tSeries.length;
		}

		@Override
		public double getNextTimepoint() {
			index++;
			return tSeries[index];
		}

		@Override
		public Iterator<Double> iterator() {
			ArrayList<Double> list = new ArrayList<Double>(tSeries.length);
			for (double t : tSeries)
				list.add(t);
			return list.iterator();
		}

    }

    public static class Observer implements LsodarObserver {

    	@Override
    	public void report(double t, double[] x) {
    		System.out.println("x["+t+"] = "+x[0]);
    	}

		@Override
		public void initialize(double t0, double[] x0, double t1) {
			System.out.println("init");
			report(t0, x0);
		}

    }


};
